#!/bin/bash
set -ex

[ -d /dev/net ] ||
    mkdir -p /dev/net
[ -c /dev/net/tun ] ||
    mknod /dev/net/tun c 10 200

[ -f openssl.cnf ] ||
    cat <<EOF > openssl.cnf
[ ca ]
default_ca	= CA_default		# The default ca section

####################################################################
[ CA_default ]

dir		=  .		# Where everything is kept
certs		= \$dir			# Where the issued certs are kept
crl_dir		= \$dir			# Where the issued crl are kept
database	= \$dir/index.txt	# database index file.
new_certs_dir	= \$dir			# default place for new certs.

certificate	= \$dir/ca.crt	 	# The CA certificate
serial		= \$dir/serial 		# The current serial number
crl		= \$dir/crl.pem 		# The current CRL
private_key	= \$dir/ca.key		# The private key
RANDFILE	= \$dir/.rand		# private random number file

x509_extensions	= basic_exts		# The extentions to add to the cert

# This allows a V2 CRL. Ancient browsers don't like it, but anything Easy-RSA
# is designed for will. In return, we get the Issuer attached to CRLs.
crl_extensions	= crl_ext

default_days	= 3650			# how long to certify for
default_crl_days= 30			# how long before next CRL
default_md	= sha256		# use public key default MD
preserve	= no			# keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy		= policy_anything

# For the 'anything' policy, which defines allowed DN fields
[ policy_anything ]
countryName		= optional
stateOrProvinceName	= optional
localityName		= optional
organizationName	= optional
organizationalUnitName	= optional
commonName		= supplied
name			= optional
emailAddress		= optional

####################################################################
# Easy-RSA request handling
# We key off \$DN_MODE to determine how to format the DN
[ req ]
default_bits		= 2048
default_keyfile		= privkey.pem
default_md		= sha256
distinguished_name	= cn_only
x509_extensions		= easyrsa_ca	# The extentions to add to the self signed cert

# A placeholder to handle the \$EXTRA_EXTS feature:
#%EXTRA_EXTS%	# Do NOT remove or change this line as \$EXTRA_EXTS support requires it

####################################################################
# Easy-RSA DN (Subject) handling

# Easy-RSA DN for cn_only support:
[ cn_only ]
commonName		= Common Name (eg: your user, host, or server name)
commonName_max		= 64
commonName_default	= changeme

# Easy-RSA DN for org support:
[ org ]
countryName			= Country Name (2 letter code)
countryName_default		= KG
countryName_min			= 2
countryName_max			= 2

stateOrProvinceName		= State or Province Name (full name)
stateOrProvinceName_default	= NA

localityName			= Locality Name (eg, city)
localityName_default		= DOCKER-CONTAINER

0.organizationName		= Organization Name (eg, company)
0.organizationName_default	= OpenVPN

organizationalUnitName		= Organizational Unit Name (eg, section)
organizationalUnitName_default	=

commonName			= Common Name (eg: your user, host, or server name)
commonName_max			= 64
commonName_default		=

emailAddress			= Email Address
emailAddress_default		= openvpn-server@docker.container
emailAddress_max		= 64

####################################################################

[ basic_exts ]
basicConstraints	= CA:FALSE
subjectKeyIdentifier	= hash
authorityKeyIdentifier	= keyid,issuer:always

# The Easy-RSA CA extensions
[ easyrsa_ca ]

# PKIX recommendations:

subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer:always

# This could be marked critical, but it's nice to support reading by any
# broken clients who attempt to do so.
basicConstraints = CA:true

# Limit key usage to CA tasks. If you really want to use the generated pair as
# a self-signed cert, comment this out.
keyUsage = cRLSign, keyCertSign

# CRL extensions.
[ crl_ext ]

# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName=issuer:copy
authorityKeyIdentifier=keyid:always,issuer:always


# Server extensions.
[ server ]

basicConstraints       = CA:FALSE
nsCertType             = server
nsComment              = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer:always
extendedKeyUsage       = serverAuth
keyUsage               = digitalSignature, keyEncipherment
EOF

[ -f ta.key ] ||
    openvpn --genkey --secret ta.key

[ -f dh.crt ] ||
    openssl dhparam -out dh.crt 2048

# Generate CA key and cert
[ -f ca.key ] ||
    openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 \
        -extensions easyrsa_ca -keyout ca.key -out ca.crt \
        -subj "/O=OpenVPN-CA/emailAddress=openvpn-ca@${HOSTNAME}" \
        -config openssl.cnf
chmod 600 ca.key


# Create server key and cert
[ -f server.key ] ||
    openssl req -new -nodes -config openssl.cnf -extensions server \
        -keyout server.key -out server.csr \
        -subj "/CN=OpenVPN-Server/O=OpenVPN-Server/emailAddress=openvpn-server@${HOSTNAME}"

touch index.txt
[ -f serial ] ||
    echo "01" > serial
[ -f server.crt ] ||
    openssl ca -batch -config openssl.cnf -extensions server \
        -out server.crt -in server.csr

[ -f server.conf ] ||
    echo "client,192.168.255.134" > ipp.txt

[ -f server.conf ] || cat >server.conf <<EOF
server 192.168.255.128 255.255.255.128
verb 3

<key>
`cat server.key`
</key>

<ca>
`cat ca.crt`
</ca>

<cert>
`cat server.crt`
</cert>

<dh>
`cat dh.crt`
</dh>

key-direction 0
<tls-auth>
`cat ta.key`
</tls-auth>

cipher AES-256-CBC
keepalive 10 60
persist-key
persist-tun
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
keepalive 10 120
comp-lzo
client-to-client
ifconfig-pool-persist ipp.txt 0

proto udp
port 1194
dev tun
status openvpn-status.log
#log-append openvpn.log
explicit-exit-notify 1
EOF

MY_IP_ADDR=$(curl -s http://myip.enix.org/REMOTE_ADDR)
[ "$MY_IP_ADDR" ] || exit 1

new_client client

iptables -t nat -A POSTROUTING -s 192.168.255.0/24 -o eth0 -j MASQUERADE


term_handler() {
    echo "term_handler"
    killall openvpn
    exit 137; # 128 + 9 -- SIGKILL
}
trap 'term_handler' SIGTERM
trap 'term_handler' SIGKILL
trap 'term_handler' SIGINT

exec openvpn --config server.conf